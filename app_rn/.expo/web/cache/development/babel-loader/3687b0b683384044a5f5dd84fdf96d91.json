{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useRef } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Share from \"react-native-web/dist/exports/Share\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport axios from 'axios';\nimport ViewShot from 'react-native-view-shot';\nimport Toast from 'react-native-toast-message';\nimport Partager from \"../../img/partager.png\";\n\nvar ScreenFinal = function ScreenFinal(_ref) {\n  var route = _ref.route;\n  var photo = route.params.photo;\n\n  function Test() {\n    return _regeneratorRuntime.async(function Test$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(axios({\n              method: 'POST',\n              url: 'https://extractimagecolorapinodejs.herokuapp.com/getextractedcolors',\n              data: {\n                \"base64image\": \"iVBORw0KGgoAAAANSUhEUgAAAZAAAABkCAMAAACfFZZFAAAAMFBMVEU/Mq7jDsK6qv//////lJ3oAgB6JD0AAAAZVkhqiScW7XUywcMFf8FuTiPJj0zv4wVsil+qAAAA5UlEQVR4nO3RUQGCUAAAsYeCIAr0b2sF75utwsbIpuyRPbM5W7JXtmb9Q4gQIUKECBEiRIgQIUKECBEiRIgQIUKECBEiRIgQIUKECBEiRIgQIUKECBEiRIgQIUKECBEiRIgQIUKECBEiRIgQIUKECBEiRIgQIUKECBEiRIgQIfcN2bJ3tmef7Jsd2ZldmRAhQoQIESJEiBAhQoQIESJEiBAhQoQIESJEiBAhQoQIESJEiBAhQoQIESJEiBAhQoQIESJEiBAhQoQIESJEiBAhQoQIESJEiBAhQoQIESJEiBAhQoT87QdJCpQdf/CtQwAAAABJRU5ErkJggg==\",\n                \"clickdata\": [{\n                  \"x\": 25,\n                  \"y\": 25\n                }, {\n                  \"x\": 75,\n                  \"y\": 25\n                }, {\n                  \"x\": 25,\n                  \"y\": 75\n                }, {\n                  \"x\": 75,\n                  \"y\": 75\n                }, {\n                  \"x\": 375,\n                  \"y\": 25\n                }]\n              }\n            }).then(function (response) {\n              console.log(response);\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  var viewShotRef = useRef();\n\n  function captureAndShareScreenshot() {\n    var imageUri;\n    return _regeneratorRuntime.async(function captureAndShareScreenshot$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(viewShotRef.current.capture());\n\n          case 2:\n            imageUri = _context2.sent;\n            Share.share({\n              url: imageUri\n            });\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(ViewShot, {\n    ref: viewShotRef,\n    options: {\n      quality: 1\n    },\n    style: {\n      zIndex: 9999\n    }\n  }, console.log(photo), React.createElement(Image, {\n    source: {\n      uri: photo.uri\n    },\n    style: {\n      width: 100 + '%',\n      height: 100 + '%'\n    }\n  }), React.createElement(TouchableOpacity, {\n    style: styles.btn,\n    onPress: captureAndShareScreenshot\n  }, React.createElement(Text, {\n    style: styles.textBtn\n  }, React.createElement(Image, {\n    source: Partager,\n    style: {\n      width: 70,\n      height: 70\n    }\n  }))), React.createElement(TouchableOpacity, {\n    style: styles.btn,\n    onPress: Test\n  }, React.createElement(Text, {\n    style: styles.textBtn\n  }, \"LOOOOOOOL\"))), React.createElement(Toast, null));\n};\n\nvar styles = StyleSheet.create({\n  background: {\n    width: 100 + '%',\n    height: 100 + '%'\n  },\n  btn: {\n    position: 'absolute',\n    top: 87 + '%',\n    left: 25\n  },\n  textBtn: {\n    color: 'white',\n    fontSize: 20,\n    textAlign: 'center',\n    backgroundColor: 'white',\n    borderWidth: 1,\n    borderRadius: 20,\n    borderColor: '#fff',\n    overflow: 'hidden'\n  }\n});\nexport default ScreenFinal;","map":{"version":3,"sources":["C:/wamp64/www/expo_copie/AwesomeProject/components/ScreenFinal/index.js"],"names":["React","useRef","axios","ViewShot","Toast","Partager","ScreenFinal","route","photo","params","Test","method","url","data","then","response","console","log","viewShotRef","captureAndShareScreenshot","current","capture","imageUri","Share","share","quality","zIndex","uri","width","height","styles","btn","textBtn","StyleSheet","create","background","position","top","left","color","fontSize","textAlign","backgroundColor","borderWidth","borderRadius","borderColor","overflow"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;;;;;;;;;;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,KAAP,MAAkB,4BAAlB;AACA,OAAOC,QAAP;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAa;AAAA,MAAXC,KAAW,QAAXA,KAAW;AAE/B,MAAQC,KAAR,GAAkBD,KAAK,CAACE,MAAxB,CAAQD,KAAR;;AAEA,WAAeE,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACUR,KAAK,CAAC;AACVS,cAAAA,MAAM,EAAE,MADE;AAEVC,cAAAA,GAAG,EAAC,qEAFM;AAGVC,cAAAA,IAAI,EAAE;AACJ,+BAAe,kdADX;AAEJ,6BAAa,CACX;AACE,uBAAK,EADP;AAEE,uBAAK;AAFP,iBADW,EAKX;AACE,uBAAK,EADP;AAEE,uBAAK;AAFP,iBALW,EASX;AACE,uBAAK,EADP;AAEE,uBAAK;AAFP,iBATW,EAaX;AACE,uBAAK,EADP;AAEE,uBAAK;AAFP,iBAbW,EAiBX;AACE,uBAAK,GADP;AAEE,uBAAK;AAFP,iBAjBW;AAFT;AAHI,aAAD,CAAL,CA6BLC,IA7BK,CA6BA,UAACC,QAAD,EAAc;AAClBC,cAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACD,aA/BK,CADV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmCE,MAAIG,WAAW,GAAGjB,MAAM,EAAxB;;AACA,WAAekB,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACyBD,WAAW,CAACE,OAAZ,CAAoBC,OAApB,EADzB;;AAAA;AACQC,YAAAA,QADR;AAIMC,YAAAA,KAAK,CAACC,KAAN,CAAY;AAACZ,cAAAA,GAAG,EAAEU;AAAN,aAAZ;;AAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAsBF,SACE,0CACE,oBAAC,QAAD;AACE,IAAA,GAAG,EAAEJ,WADP;AAEE,IAAA,OAAO,EAAE;AAACO,MAAAA,OAAO,EAAE;AAAV,KAFX;AAGE,IAAA,KAAK,EAAE;AAACC,MAAAA,MAAM,EAAC;AAAR;AAHT,KAIGV,OAAO,CAACC,GAAR,CAAYT,KAAZ,CAJH,EAMI,oBAAC,KAAD;AAAO,IAAA,MAAM,EAAE;AAAEmB,MAAAA,GAAG,EAAEnB,KAAK,CAACmB;AAAb,KAAf;AAAkC,IAAA,KAAK,EAAE;AAACC,MAAAA,KAAK,EAAC,MAAI,GAAX;AAAeC,MAAAA,MAAM,EAAC,MAAI;AAA1B;AAAzC,IANJ,EAOI,oBAAC,gBAAD;AACE,IAAA,KAAK,EAAEC,MAAM,CAACC,GADhB;AAEE,IAAA,OAAO,EAAEZ;AAFX,KAKE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEW,MAAM,CAACE;AAApB,KAA6B,oBAAC,KAAD;AAAO,IAAA,MAAM,EAAE3B,QAAf;AAAyB,IAAA,KAAK,EAAE;AAACuB,MAAAA,KAAK,EAAC,EAAP;AAAUC,MAAAA,MAAM,EAAC;AAAjB;AAAhC,IAA7B,CALF,CAPJ,EAeI,oBAAC,gBAAD;AACE,IAAA,KAAK,EAAEC,MAAM,CAACC,GADhB;AAEE,IAAA,OAAO,EAAErB;AAFX,KAIE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEoB,MAAM,CAACE;AAApB,iBAJF,CAfJ,CADF,EAyBE,oBAAC,KAAD,OAzBF,CADF;AA6BD,CA3FD;;AA6FA,IAAMF,MAAM,GAAGG,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,UAAU,EAAE;AACVP,IAAAA,KAAK,EAAC,MAAI,GADA;AAEVC,IAAAA,MAAM,EAAC,MAAI;AAFD,GADmB;AAK/BE,EAAAA,GAAG,EAAE;AACHK,IAAAA,QAAQ,EAAC,UADN;AAEHC,IAAAA,GAAG,EAAC,KAAG,GAFJ;AAGHC,IAAAA,IAAI,EAAC;AAHF,GAL0B;AAW/BN,EAAAA,OAAO,EAAE;AACPO,IAAAA,KAAK,EAAE,OADA;AAEPC,IAAAA,QAAQ,EAAE,EAFH;AAGPC,IAAAA,SAAS,EAAE,QAHJ;AAIPC,IAAAA,eAAe,EAAC,OAJT;AAKPC,IAAAA,WAAW,EAAE,CALN;AAMPC,IAAAA,YAAY,EAAC,EANN;AAOPC,IAAAA,WAAW,EAAE,MAPN;AAQPC,IAAAA,QAAQ,EAAC;AARF;AAXsB,CAAlB,CAAf;AAsBA,eAAexC,WAAf","sourcesContent":["import React, { useRef } from 'react';\r\nimport { StyleSheet, Text, View, Image, TouchableOpacity, Button, Platform, Share, Dimensions  } from 'react-native';\r\nimport axios from 'axios';\r\nimport ViewShot from 'react-native-view-shot';\r\nimport Toast from 'react-native-toast-message';\r\nimport Partager from '../../img/partager.png';\r\n\r\nconst ScreenFinal = ({route}) => {\r\n\r\n  const { photo } = route.params;\r\n  \r\n  async function Test() {\r\n      await axios({\r\n        method: 'POST',\r\n        url:'https://extractimagecolorapinodejs.herokuapp.com/getextractedcolors',\r\n        data: {\r\n          \"base64image\": \"iVBORw0KGgoAAAANSUhEUgAAAZAAAABkCAMAAACfFZZFAAAAMFBMVEU/Mq7jDsK6qv//////lJ3oAgB6JD0AAAAZVkhqiScW7XUywcMFf8FuTiPJj0zv4wVsil+qAAAA5UlEQVR4nO3RUQGCUAAAsYeCIAr0b2sF75utwsbIpuyRPbM5W7JXtmb9Q4gQIUKECBEiRIgQIUKECBEiRIgQIUKECBEiRIgQIUKECBEiRIgQIUKECBEiRIgQIUKECBEiRIgQIUKECBEiRIgQIUKECBEiRIgQIUKECBEiRIgQIfcN2bJ3tmef7Jsd2ZldmRAhQoQIESJEiBAhQoQIESJEiBAhQoQIESJEiBAhQoQIESJEiBAhQoQIESJEiBAhQoQIESJEiBAhQoQIESJEiBAhQoQIESJEiBAhQoQIESJEiBAhQoT87QdJCpQdf/CtQwAAAABJRU5ErkJggg==\",\r\n          \"clickdata\": [\r\n            {\r\n              \"x\": 25,\r\n              \"y\": 25\r\n            },\r\n            {\r\n              \"x\": 75,\r\n              \"y\": 25\r\n            },\r\n            {\r\n              \"x\": 25,\r\n              \"y\": 75\r\n            },\r\n            {\r\n              \"x\": 75,\r\n              \"y\": 75\r\n            },\r\n            {\r\n              \"x\": 375,\r\n              \"y\": 25\r\n            }\r\n          ]\r\n        }\r\n      })\r\n      .then((response) => {\r\n        console.log(response)\r\n      })\r\n    }\r\n\r\n    let viewShotRef = useRef()\r\n    async function captureAndShareScreenshot() {\r\n      const imageUri = await viewShotRef.current.capture()\r\n      \r\n        // if(Platform.OS === 'ios') {\r\n          Share.share({url: imageUri})  \r\n        // } else {\r\n          \r\n        //   } else {\r\n        //     Toast.show({\r\n        //       type: 'error',\r\n        //       text1: 'Erreur : merci de rééssayez plus tard',\r\n        //     });          \r\n        //   }\r\n        // })\r\n        // .catch((err) => {\r\n        //   Toast.show({\r\n        //     type: 'error',\r\n        //     text1: err + ' :  merci de rééssayez plus tard',\r\n        //   });          \r\n        // })\r\n      // }\r\n    }\r\n  return (\r\n    <>\r\n      <ViewShot\r\n        ref={viewShotRef}\r\n        options={{quality: 1}}\r\n        style={{zIndex:9999}} > \r\n        {console.log(photo)}\r\n\r\n          <Image source={{ uri: photo.uri}} style={{width:100+'%',height:100+'%'}}/>   \r\n          <TouchableOpacity\r\n            style={styles.btn}\r\n            onPress={captureAndShareScreenshot}\r\n          >\r\n\r\n            <Text style={styles.textBtn}><Image source={Partager} style={{width:70,height:70}} /></Text>\r\n          </TouchableOpacity>\r\n\r\n          <TouchableOpacity\r\n            style={styles.btn}\r\n            onPress={Test}\r\n          >\r\n            <Text style={styles.textBtn}>LOOOOOOOL</Text>\r\n          </TouchableOpacity>\r\n          \r\n\r\n      </ViewShot>\r\n      <Toast />\r\n    </>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  background: {\r\n    width:100+'%',\r\n    height:100+'%',\r\n  },\r\n  btn: {\r\n    position:'absolute',\r\n    top:87+'%',\r\n    left:25,\r\n  },\r\n\r\n  textBtn: {\r\n    color: 'white',\r\n    fontSize: 20,\r\n    textAlign: 'center',\r\n    backgroundColor:'white',\r\n    borderWidth: 1,\r\n    borderRadius:20,\r\n    borderColor: '#fff',\r\n    overflow:'hidden',\r\n  },\r\n})\r\nexport default ScreenFinal"]},"metadata":{},"sourceType":"module"}