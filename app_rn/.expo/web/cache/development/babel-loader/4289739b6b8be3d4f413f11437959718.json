{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useRef } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Share from \"react-native-web/dist/exports/Share\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport axios from 'axios';\nimport ViewShot from 'react-native-view-shot';\nimport Toast from 'react-native-toast-message';\nimport Partager from \"../../img/partager.jpg\";\n\nvar ScreenFinal = function ScreenFinal(_ref) {\n  var route = _ref.route;\n\n  var GenererChaineAleatoire = function GenererChaineAleatoire(longueur) {\n    var listeCar = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    var chaine = '';\n    var max = listeCar.length - 1;\n\n    for (var i = 0; i < longueur; i++) {\n      chaine = chaine + listeCar[Math.floor(Math.random() * (max + 1))];\n    }\n\n    return chaine;\n  };\n\n  var photo = route.params.photo;\n  var viewShotRef = useRef();\n\n  function captureAndShareScreenshot() {\n    var imageUri;\n    return _regeneratorRuntime.async(function captureAndShareScreenshot$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(viewShotRef.current.capture());\n\n          case 2:\n            imageUri = _context.sent;\n            Share.share({\n              url: imageUri\n            });\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  ;\n  return React.createElement(React.Fragment, null, React.createElement(ViewShot, {\n    ref: viewShotRef,\n    options: {\n      quality: 1\n    },\n    style: {\n      zIndex: 9999\n    }\n  }, React.createElement(Image, {\n    source: {\n      uri: photo.uri\n    },\n    style: {\n      width: 100 + '%',\n      height: 100 + '%'\n    }\n  }), React.createElement(TouchableOpacity, {\n    style: styles.btn,\n    onPress: captureAndShareScreenshot\n  }, React.createElement(Image, {\n    source: Partager,\n    style: {\n      width: 20\n    }\n  }))), React.createElement(Toast, null));\n};\n\nvar styles = StyleSheet.create({\n  background: {\n    width: 100 + '%',\n    height: 100 + '%'\n  },\n  btn: {\n    padding: 10,\n    width: 100 + '%',\n    marginBottom: 5,\n    backgroundColor: 'black',\n    position: 'absolute',\n    borderWidth: 2,\n    borderColor: 'white',\n    top: 90 + '%',\n    left: 20,\n    width: 10 + \"%\"\n  },\n  textBtn: {\n    color: 'white',\n    fontSize: 20,\n    textAlign: 'center'\n  }\n});\nexport default ScreenFinal;","map":{"version":3,"sources":["C:/wamp64/www/expo_copie/AwesomeProject/components/ScreenFinal/index.js"],"names":["React","useRef","axios","ViewShot","Toast","Partager","ScreenFinal","route","GenererChaineAleatoire","longueur","listeCar","chaine","max","length","i","Math","floor","random","photo","params","viewShotRef","captureAndShareScreenshot","current","capture","imageUri","Share","share","url","quality","zIndex","uri","width","height","styles","btn","StyleSheet","create","background","padding","marginBottom","backgroundColor","position","borderWidth","borderColor","top","left","textBtn","color","fontSize","textAlign"],"mappings":"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","sourcesContent":["import React, { useRef } from 'react';\r\nimport { StyleSheet, Text, View, Image, TouchableOpacity, Button, Platform, Share, Dimensions  } from 'react-native';\r\nimport axios from 'axios';\r\nimport ViewShot from 'react-native-view-shot';\r\nimport Toast from 'react-native-toast-message';\r\nimport Partager from '../../img/partager.jpg';\r\n\r\nconst ScreenFinal = ({route}) => {\r\n  const GenererChaineAleatoire = longueur => {\r\n    let listeCar = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n    let chaine = '';\r\n    let max = listeCar.length - 1;\r\n    for (let i = 0; i < longueur; i++) {\r\n    chaine = chaine + listeCar[Math.floor(Math.random() * (max + 1) )];\r\n    }\r\n    return chaine;\r\n  }\r\n\r\n    const { photo } = route.params;\r\n\r\n    let viewShotRef = useRef()\r\n    async function captureAndShareScreenshot() {\r\n      const imageUri = await viewShotRef.current.capture()\r\n      \r\n        // if(Platform.OS === 'ios') {\r\n          Share.share({url: imageUri})  \r\n        // } else {\r\n\r\n        // let token_url = GenererChaineAleatoire(20)\r\n        // await axios({\r\n        //   method: 'POST',\r\n        //   data: 'img='+imageUri+'&token_url='+token_url,\r\n        //   url:'https://www.adrien-meynard.fr/dessin/post_api/'\r\n        // })\r\n        // .then((response) => {\r\n        //   if(response.data === 1) {\r\n        //     Toast.show({\r\n        //       type: 'success',\r\n        //       text1: 'Lien de l\\'image copié dans le presse papier',\r\n        //     });\r\n            // adrien-meynard.fr/dessin/?token_img=+chaine\r\n        //   } else {\r\n        //     Toast.show({\r\n        //       type: 'error',\r\n        //       text1: 'Erreur : merci de rééssayez plus tard',\r\n        //     });          \r\n        //   }\r\n        // })\r\n        // .catch((err) => {\r\n        //   Toast.show({\r\n        //     type: 'error',\r\n        //     text1: err + ' :  merci de rééssayez plus tard',\r\n        //   });          \r\n        // })\r\n      // }\r\n    };\r\n\r\n  return (\r\n    <>\r\n      <ViewShot\r\n        ref={viewShotRef}\r\n        options={{quality: 1}}\r\n        style={{zIndex:9999}} > \r\n\r\n          <Image source={{ uri: photo.uri }} style={{width:100+'%',height:100+'%'}}/>   \r\n                    <TouchableOpacity\r\n            style={styles.btn}\r\n            onPress={captureAndShareScreenshot}\r\n          >\r\n          <Image source={Partager} style={{width:20}} />\r\n          </TouchableOpacity>\r\n      </ViewShot>\r\n      <Toast />\r\n    </>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  background: {\r\n    width:100+'%',\r\n    height:100+'%',\r\n  },\r\n  btn: {\r\n    padding: 10,\r\n    width: 100 + '%',\r\n    marginBottom: 5,\r\n    backgroundColor:'black',\r\n    position:'absolute',\r\n    borderWidth:2,\r\n    borderColor:'white',\r\n    top:90+'%',\r\n    left:20,\r\n    width:10+\"%\"\r\n  },\r\n\r\n  textBtn: {\r\n    color: 'white',\r\n    fontSize: 20,\r\n    textAlign: 'center',\r\n  },\r\n})\r\nexport default ScreenFinal"]},"metadata":{},"sourceType":"module"}