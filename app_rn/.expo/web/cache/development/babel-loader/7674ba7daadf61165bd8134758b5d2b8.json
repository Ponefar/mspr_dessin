{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useRef, useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Share from \"react-native-web/dist/exports/Share\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport axios from 'axios';\nimport ViewShot from 'react-native-view-shot';\nimport Toast from 'react-native-toast-message';\nimport Partager from \"../../img/partager.png\";\nimport { vw, vh, vmin, vmax } from 'react-native-expo-viewport-units';\n\nvar ScreenFinal = function ScreenFinal(_ref) {\n  var route = _ref.route;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      colorOne = _useState2[0],\n      setColorOne = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      colorTwo = _useState4[0],\n      setColorTwo = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      colorThree = _useState6[0],\n      setColorThree = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      colorFour = _useState8[0],\n      setColorFour = _useState8[1];\n\n  var _useState9 = useState(''),\n      _useState10 = _slicedToArray(_useState9, 2),\n      colorFive = _useState10[0],\n      setColorFive = _useState10[1];\n\n  var _useState11 = useState(''),\n      _useState12 = _slicedToArray(_useState11, 2),\n      loading = _useState12[0],\n      setLoading = _useState12[1];\n\n  var photo = route.params.photo;\n  var title = route.params.title;\n  useEffect(function () {\n    if (colorOne != '' && colorTwo != '' && colorThree != '' && colorFour != '' && colorFive != '') {\n      setLoading('none');\n    }\n  });\n\n  var GetColorPixel = function GetColorPixel() {\n    return _regeneratorRuntime.async(function GetColorPixel$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.t0 = _regeneratorRuntime;\n            _context.t1 = axios;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(photo.base64);\n\n          case 4:\n            _context.t2 = _context.sent;\n            _context.t3 = [{\n              \"x\": 25,\n              \"y\": 25\n            }, {\n              \"x\": 75,\n              \"y\": 25\n            }, {\n              \"x\": 25,\n              \"y\": 75\n            }, {\n              \"x\": 75,\n              \"y\": 75\n            }, {\n              \"x\": 375,\n              \"y\": 25\n            }];\n            _context.t4 = {\n              \"base64image\": _context.t2,\n              \"clickdata\": _context.t3\n            };\n            _context.t5 = {\n              method: 'POST',\n              url: 'https://nodejsapigetpixelcolor.herokuapp.com/api/v1/extractcolors',\n              data: _context.t4\n            };\n            _context.t6 = (0, _context.t1)(_context.t5).then(function (response) {\n              setColorOne(response.data[0][0] + ',' + response.data[0][1] + ',' + response.data[0][2] + ',' + response.data[0][3]);\n              setColorTwo(response.data[1][0] + ',' + response.data[1][1] + ',' + response.data[1][2] + ',' + response.data[1][3]);\n              setColorThree(response.data[2][0] + ',' + response.data[2][1] + ',' + response.data[2][2] + ',' + response.data[2][3]);\n              setColorFour(response.data[3][0] + ',' + response.data[3][1] + ',' + response.data[3][2] + ',' + response.data[3][3]);\n              setColorFive(response.data[4][0] + ',' + response.data[4][1] + ',' + response.data[4][2] + ',' + response.data[4][3]);\n            });\n            _context.next = 11;\n            return _context.t0.awrap.call(_context.t0, _context.t6);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    GetColorPixel();\n  }, []);\n  var viewShotRef = useRef();\n\n  function captureAndShareScreenshot() {\n    var imageUri;\n    return _regeneratorRuntime.async(function captureAndShareScreenshot$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(viewShotRef.current.capture());\n\n          case 2:\n            imageUri = _context2.sent;\n            Share.share({\n              url: imageUri\n            });\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(View, null, React.createElement(View, {\n    style: [styles.loading, {\n      display: loading\n    }]\n  }, React.createElement(ActivityIndicator, {\n    size: \"large\",\n    color: \"black\"\n  })), React.createElement(View, {\n    style: [styles.blockColor, styles.blockColorOne, {\n      backgroundColor: 'rgba(' + colorOne + ')'\n    }]\n  }, React.createElement(Text, null, \"T\\xEAte  \")), React.createElement(ViewShot, {\n    ref: viewShotRef,\n    options: {\n      quality: 1\n    },\n    style: {\n      zIndex: 9999\n    }\n  }, React.createElement(Image, {\n    source: {\n      uri: photo.uri\n    },\n    style: {\n      width: 100 + '%',\n      height: 100 + '%'\n    }\n  }), React.createElement(TouchableOpacity, {\n    style: styles.btn,\n    onPress: captureAndShareScreenshot\n  }, React.createElement(Text, {\n    style: styles.textBtn\n  }, React.createElement(Image, {\n    source: Partager,\n    style: {\n      width: 70,\n      height: 70\n    }\n  })))), React.createElement(Toast, null)));\n};\n\nvar styles = StyleSheet.create({\n  blockColor: {\n    position: 'absolute',\n    left: 0,\n    width: vw(100),\n    height: vh(100),\n    zIndex: 9999,\n    opacity: 1,\n    top: -150,\n    left: 0,\n    zIndex: 99999\n  },\n  loading: {\n    backgroundColor: 'gray',\n    width: vw(100),\n    height: vh(100),\n    display: 'flex',\n    justifyContent: 'center',\n    position: 'absolute',\n    opacity: 1,\n    top: -150,\n    left: 0,\n    zIndex: 99999\n  },\n  none: {\n    display: 'none'\n  },\n  background: {\n    width: 100 + '%',\n    height: 100 + '%'\n  },\n  btn: {\n    position: 'absolute',\n    top: 87 + '%',\n    left: 25\n  },\n  textBtn: {\n    color: 'white',\n    fontSize: 20,\n    textAlign: 'center',\n    backgroundColor: 'white',\n    borderWidth: 1,\n    borderRadius: 20,\n    borderColor: '#fff',\n    overflow: 'hidden'\n  }\n});\nexport default ScreenFinal;","map":{"version":3,"sources":["C:/wamp64/www/expo_copie/AwesomeProject/components/ScreenFinal/index.js"],"names":["React","useRef","useState","useEffect","axios","ViewShot","Toast","Partager","vw","vh","vmin","vmax","ScreenFinal","route","colorOne","setColorOne","colorTwo","setColorTwo","colorThree","setColorThree","colorFour","setColorFour","colorFive","setColorFive","loading","setLoading","photo","params","title","GetColorPixel","base64","method","url","data","then","response","viewShotRef","captureAndShareScreenshot","current","capture","imageUri","Share","share","styles","display","blockColor","blockColorOne","backgroundColor","quality","zIndex","uri","width","height","btn","textBtn","StyleSheet","create","position","left","opacity","top","justifyContent","none","background","color","fontSize","textAlign","borderWidth","borderRadius","borderColor","overflow"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\r\nimport { StyleSheet, Text, View, Image, TouchableOpacity, Button, Platform, Share, Dimensions, ActivityIndicator  } from 'react-native';\r\nimport axios from 'axios';\r\nimport ViewShot from 'react-native-view-shot';\r\nimport Toast from 'react-native-toast-message';\r\nimport Partager from '../../img/partager.png';\r\nimport { vw, vh, vmin, vmax } from 'react-native-expo-viewport-units';\r\n\r\nconst ScreenFinal = ({route}) => {\r\n\r\n  const [colorOne, setColorOne] = useState('')\r\n  const [colorTwo, setColorTwo] = useState('')\r\n  const [colorThree, setColorThree] = useState('')\r\n  const [colorFour, setColorFour] = useState('')\r\n  const [colorFive, setColorFive] = useState('')\r\n  const [loading, setLoading] = useState('')\r\n\r\n  const photo = route.params.photo;\r\n  const title = route.params.title // IMG 3D a scanner\r\n\r\n  useEffect(() => {\r\n    if(colorOne != '' && colorTwo != '' && colorThree != '' && colorFour != '' && colorFive != '') {setLoading('none')}\r\n  })\r\n\r\n    const GetColorPixel = async() => { \r\n      await axios({\r\n        method: 'POST',\r\n        url:'https://nodejsapigetpixelcolor.herokuapp.com/api/v1/extractcolors',\r\n        data: {\r\n          \"base64image\": await photo.base64,\r\n          \"clickdata\": [\r\n            {\r\n              \"x\": 25,\r\n              \"y\": 25\r\n            },\r\n            {\r\n              \"x\": 75,\r\n              \"y\": 25\r\n            },\r\n            {\r\n              \"x\": 25,\r\n              \"y\": 75\r\n            },\r\n            {\r\n              \"x\": 75,\r\n              \"y\": 75\r\n            },\r\n            {\r\n              \"x\": 375,\r\n              \"y\": 25\r\n            }\r\n          ]\r\n        }\r\n      })\r\n      .then((response) => {\r\n        setColorOne(response.data[0][0] +','+response.data[0][1]+','+response.data[0][2]+','+response.data[0][3])\r\n        setColorTwo(response.data[1][0] +','+response.data[1][1]+','+response.data[1][2]+','+response.data[1][3])\r\n        setColorThree(response.data[2][0] +','+response.data[2][1]+','+response.data[2][2]+','+response.data[2][3])\r\n        setColorFour(response.data[3][0] +','+response.data[3][1]+','+response.data[3][2]+','+response.data[3][3])\r\n        setColorFive(response.data[4][0] +','+response.data[4][1]+','+response.data[4][2]+','+response.data[4][3])\r\n      })\r\n    }\r\n\r\n    useEffect(() => {\r\n      GetColorPixel()\r\n    }, [])\r\n\r\n    let viewShotRef = useRef()\r\n    async function captureAndShareScreenshot() {\r\n      const imageUri = await viewShotRef.current.capture()\r\n      \r\n        // if(Platform.OS === 'ios') {\r\n          Share.share({url: imageUri})  \r\n        // } else {\r\n          \r\n        //   } else {\r\n        //     Toast.show({\r\n        //       type: 'error',\r\n        //       text1: 'Erreur : merci de rééssayez plus tard',\r\n        //     });          \r\n        //   }\r\n        // })\r\n        // .catch((err) => {\r\n        //   Toast.show({\r\n        //     type: 'error',\r\n        //     text1: err + ' :  merci de rééssayez plus tard',\r\n        //   });          \r\n        // })\r\n      // }\r\n    }\r\n  return (\r\n    <>\r\n      <View>\r\n      <View style={[styles.loading, {display:loading}]}>\r\n        <ActivityIndicator size=\"large\" color=\"black\" />\r\n      </View>\r\n      <View style={[styles.blockColor, styles.blockColorOne, {backgroundColor:'rgba('+colorOne+')'}]}><Text>Tête  </Text></View>\r\n      <ViewShot\r\n        ref={viewShotRef}\r\n        options={{quality: 1}}\r\n        style={{zIndex:9999}} > \r\n          <Image source={{ uri: photo.uri}} style={{width:100+'%',height:100+'%'}}/>   \r\n          <TouchableOpacity\r\n            style={styles.btn}\r\n            onPress={captureAndShareScreenshot}\r\n          >\r\n            <Text style={styles.textBtn}><Image source={Partager} style={{width:70,height:70}} /></Text>\r\n            {/* <Text style={{backgroundColor:'rgba('+colorFive+')'}}>AAAAAAAAAAAAAAAAA</Text> */}\r\n          </TouchableOpacity>\r\n\r\n      </ViewShot>\r\n      <Toast />\r\n      </View>\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n\r\n  blockColor : {\r\n    position:'absolute',\r\n    left:0,\r\n    width:vw(100),\r\n    height:vh(100),\r\n    zIndex:9999,\r\n    opacity:1,\r\n    top:-150,\r\n    left:0,\r\n    zIndex:99999\r\n  },\r\n\r\n\r\n  loading: {\r\n    backgroundColor:'gray',\r\n    width:vw(100),\r\n    height:vh(100),\r\n    display:'flex',\r\n    justifyContent:'center',\r\n    position:'absolute',\r\n    opacity:1,\r\n    top:-150,\r\n    left:0,\r\n    zIndex:99999\r\n  },\r\n\r\n  none: {\r\n    display:'none'\r\n  },\r\n  background: {\r\n    width:100+'%',\r\n    height:100+'%',\r\n  },\r\n  btn: {\r\n    position:'absolute',\r\n    top:87+'%',\r\n    left:25,\r\n  },\r\n\r\n  textBtn: {\r\n    color: 'white',\r\n    fontSize: 20,\r\n    textAlign: 'center',\r\n    backgroundColor:'white',\r\n    borderWidth: 1,\r\n    borderRadius:20,\r\n    borderColor: '#fff',\r\n    overflow:'hidden',\r\n  },\r\n})\r\nexport default ScreenFinal"]},"metadata":{},"sourceType":"module"}