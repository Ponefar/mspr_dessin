{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport UIManager from \"react-native-web/dist/exports/UIManager\";\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport { DefaultPropTypes } from \"./PropTypes\";\nimport RCTScnModelView from \"./RCTScnModelView\";\nimport BaseModelView from \"./BaseModelView\";\nvar IS_IOS = Platform.OS === 'ios';\n\nvar ModelView = function (_BaseModelView) {\n  _inherits(ModelView, _BaseModelView);\n\n  var _super = _createSuper(ModelView);\n\n  function ModelView() {\n    var _this;\n\n    _classCallCheck(this, ModelView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.rctView = null;\n\n    _this.setRef = function (view) {\n      _this.rctView = view;\n    };\n\n    _this.renderIOS = function () {\n      var _this$state = _this.state,\n          modelSrc = _this$state.modelSrc,\n          textureSrc = _this$state.textureSrc;\n      var scale = _this.props.scale || 1;\n      return React.createElement(RCTScnModelView, _extends({}, _this.props, {\n        ref: _this.setRef,\n        scale: scale,\n        modelSrc: modelSrc,\n        textureSrc: textureSrc,\n        autoPlayAnimations: _this.props.autoPlay\n      }));\n    };\n\n    _this.renderAndroid = function () {\n      var _this$state2 = _this.state,\n          modelSrc = _this$state2.modelSrc,\n          textureSrc = _this$state2.textureSrc;\n      var scale = _this.props.scale || 1;\n      return React.createElement(View, {\n        style: _this.props.style\n      }, React.createElement(RCTScnModelView, _extends({}, _this.props, {\n        children: null,\n        ref: _this.setRef,\n        scale: scale * 3,\n        modelSrc: modelSrc,\n        textureSrc: textureSrc,\n        backgroundColor: StyleSheet.flatten(_this.props.style).backgroundColor || 'white',\n        autoPlayAnimations: _this.props.autoPlay\n      })), React.createElement(View, {\n        style: {\n          position: 'absolute',\n          top: 0,\n          right: 0,\n          bottom: 0,\n          left: 0\n        },\n        pointerEvents: \"box-none\"\n      }, _this.props.children));\n    };\n\n    return _this;\n  }\n\n  _createClass(ModelView, [{\n    key: \"startAnimation\",\n    value: function startAnimation() {\n      if (IS_IOS) {\n        NativeModules['3DScnModelViewManager'].startAnimation(findNodeHandle(this.rctView));\n      } else {\n        UIManager.dispatchViewManagerCommand(findNodeHandle(this.rctView), UIManager.RCT3DScnModelView.Commands.startAnimation, []);\n      }\n    }\n  }, {\n    key: \"stopAnimation\",\n    value: function stopAnimation() {\n      if (IS_IOS) {\n        NativeModules['3DScnModelViewManager'].stopAnimation(findNodeHandle(this.rctView));\n      } else {\n        UIManager.dispatchViewManagerCommand(findNodeHandle(this.rctView), UIManager.RCT3DScnModelView.Commands.stopAnimation, []);\n      }\n    }\n  }, {\n    key: \"setProgress\",\n    value: function setProgress(value) {\n      var progress = value >= 1.0 ? 0.999999 : value;\n      progress = progress < 0.0 ? 0.0 : progress;\n\n      if (IS_IOS) {\n        NativeModules['3DScnModelViewManager'].setProgress(findNodeHandle(this.rctView), progress || 0);\n      } else {\n        UIManager.dispatchViewManagerCommand(findNodeHandle(this.rctView), UIManager.RCT3DScnModelView.Commands.setProgress, [progress]);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state3 = this.state,\n          modelSrc = _this$state3.modelSrc,\n          textureSrc = _this$state3.textureSrc;\n      return modelSrc && textureSrc ? Platform.OS === 'ios' ? this.renderIOS() : this.renderAndroid() : React.createElement(View, this.props);\n    }\n  }]);\n\n  return ModelView;\n}(BaseModelView);\n\nModelView.propTypes = DefaultPropTypes;\nexport default ModelView;","map":{"version":3,"sources":["C:/wamp64/www/expo_copie/AwesomeProject/node_modules/react-native-3d-model-view/lib/ModelView.js"],"names":["React","DefaultPropTypes","RCTScnModelView","BaseModelView","IS_IOS","Platform","OS","ModelView","rctView","setRef","view","renderIOS","state","modelSrc","textureSrc","scale","props","autoPlay","renderAndroid","style","StyleSheet","flatten","backgroundColor","position","top","right","bottom","left","children","NativeModules","startAnimation","findNodeHandle","UIManager","dispatchViewManagerCommand","RCT3DScnModelView","Commands","stopAnimation","value","progress","setProgress","propTypes"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { View, StyleSheet, Platform, NativeModules, UIManager, findNodeHandle } from 'react-native'\nimport { DefaultPropTypes } from './PropTypes'\nimport RCTScnModelView from './RCTScnModelView'\nimport BaseModelView from './BaseModelView'\n\nconst IS_IOS = Platform.OS === 'ios'\n\nclass ModelView extends BaseModelView {\n\n  rctView = null\n\n  setRef = view => {\n    this.rctView = view\n  }\n\n  startAnimation () {\n    if (IS_IOS) {\n      NativeModules['3DScnModelViewManager'].startAnimation(findNodeHandle(this.rctView))\n    } else {\n      UIManager.dispatchViewManagerCommand(\n        findNodeHandle(this.rctView),\n        UIManager.RCT3DScnModelView.Commands.startAnimation,\n        []\n      )\n    }\n  }\n\n  stopAnimation () {\n    if (IS_IOS) {\n      NativeModules['3DScnModelViewManager'].stopAnimation(findNodeHandle(this.rctView))\n    } else {\n      UIManager.dispatchViewManagerCommand(\n        findNodeHandle(this.rctView),\n        UIManager.RCT3DScnModelView.Commands.stopAnimation,\n        []\n      )\n    }\n  }\n\n  setProgress (value) {\n    let progress = value >= 1.0 ? 0.999999 : value\n    progress = progress < 0.0 ? 0.0 : progress\n    if (IS_IOS) {\n      NativeModules['3DScnModelViewManager'].setProgress(findNodeHandle(this.rctView), progress || 0)\n    } else {\n      UIManager.dispatchViewManagerCommand(\n        findNodeHandle(this.rctView),\n        UIManager.RCT3DScnModelView.Commands.setProgress,\n        [progress]\n      )\n    }\n  }\n\n  renderIOS = () => {\n    const {modelSrc, textureSrc} = this.state\n    const scale = this.props.scale || 1\n    return <RCTScnModelView\n      {...this.props}\n      ref={this.setRef}\n      scale={scale}\n      modelSrc={modelSrc}\n      textureSrc={textureSrc}\n      autoPlayAnimations={this.props.autoPlay} />\n  }\n\n  renderAndroid = () => {\n    const {modelSrc, textureSrc} = this.state\n    const scale = this.props.scale || 1\n    return <View style={this.props.style}>\n      <RCTScnModelView\n        {...this.props}\n        children={null}\n        ref={this.setRef}\n        scale={scale * 3}\n        modelSrc={modelSrc}\n        textureSrc={textureSrc}\n        backgroundColor={StyleSheet.flatten(this.props.style).backgroundColor || 'white'}\n        autoPlayAnimations={this.props.autoPlay} />\n      <View style={{position: 'absolute', top: 0, right: 0, bottom: 0, left: 0}} pointerEvents='box-none'>\n        {this.props.children}\n      </View>\n    </View>\n  }\n\n  render () {\n    const {modelSrc, textureSrc} = this.state\n    return modelSrc && textureSrc\n    ? (Platform.OS === 'ios' ? this.renderIOS() : this.renderAndroid())\n    : <View {...this.props} />\n  }\n}\n\nModelView.propTypes = DefaultPropTypes\n\nexport default ModelView\n"]},"metadata":{},"sourceType":"module"}