{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport * as ExpoTHREE from 'expo-three';\nimport * as THREE from 'three';\nimport { EpoWebGLRendering, GLView } from 'expo-gl';\n\nvar ScreenFinal = function ScreenFinal() {\n  function _onContextCreate(gl) {\n    var width, height, sceneColor, renderer, camera, scene;\n    return _regeneratorRuntime.async(function _onContextCreate$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            width = gl.drawingBufferWidth, height = gl.drawingBufferHeight;\n            sceneColor = 0x10505b;\n            renderer = new ExpoTHREE.Renderer({\n              gl: gl\n            });\n            renderer.setSize(width, height);\n            renderer.setClearColor(sceneColor);\n            camera = new THREE.PerspectiveCamera(80, width / height, 0.01, 1000);\n            camera.position.set(2, 5, 5);\n            scene = new THREE.Scene();\n            scene.add(new THREE.GridHelper(10, 15));\n            renderer.render(scene, camera);\n            gl.endFrameEXP();\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  return React.createElement(GLView, {\n    style: {\n      flex: 1\n    },\n    onContextCreate: _onContextCreate\n  });\n};\n\nexport default ScreenFinal;","map":{"version":3,"sources":["C:/wamp64/www/expo - Copie/AwesomeProject/components/ScreenFinal/index.js"],"names":["React","ExpoTHREE","THREE","EpoWebGLRendering","GLView","ScreenFinal","_onContextCreate","gl","width","drawingBufferWidth","height","drawingBufferHeight","sceneColor","renderer","Renderer","setSize","setClearColor","camera","PerspectiveCamera","position","set","scene","Scene","add","GridHelper","render","endFrameEXP","flex"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;;AAEA,OAAO,KAAKC,SAAZ,MAA2B,YAA3B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAAQC,iBAAR,EAA2BC,MAA3B,QAAwC,SAAxC;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AAExB,WAAeC,gBAAf,CAAiCC,EAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAE8BC,YAAAA,KAF9B,GAEqED,EAFrE,CAEUE,kBAFV,EAE0DC,MAF1D,GAEqEH,EAFrE,CAEqCI,mBAFrC;AAGQC,YAAAA,UAHR,GAGqB,QAHrB;AAMMC,YAAAA,QANN,GAMiB,IAAIZ,SAAS,CAACa,QAAd,CAAuB;AAAEP,cAAAA,EAAE,EAAFA;AAAF,aAAvB,CANjB;AAOEM,YAAAA,QAAQ,CAACE,OAAT,CAAiBP,KAAjB,EAAwBE,MAAxB;AACAG,YAAAA,QAAQ,CAACG,aAAT,CAAuBJ,UAAvB;AAGIK,YAAAA,MAXN,GAWe,IAAIf,KAAK,CAACgB,iBAAV,CAA4B,EAA5B,EAAgCV,KAAK,GAAGE,MAAxC,EAAgD,IAAhD,EAAsD,IAAtD,CAXf;AAYEO,YAAAA,MAAM,CAACE,QAAP,CAAgBC,GAAhB,CAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B;AAGIC,YAAAA,KAfN,GAec,IAAInB,KAAK,CAACoB,KAAV,EAfd;AAgBED,YAAAA,KAAK,CAACE,GAAN,CAAU,IAAIrB,KAAK,CAACsB,UAAV,CAAqB,EAArB,EAAyB,EAAzB,CAAV;AAGAX,YAAAA,QAAQ,CAACY,MAAT,CAAgBJ,KAAhB,EAAuBJ,MAAvB;AACAV,YAAAA,EAAE,CAACmB,WAAH;;AApBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAuBD,SAGC,oBAAC,MAAD;AACA,IAAA,KAAK,EAAE;AAAEC,MAAAA,IAAI,EAAE;AAAR,KADP;AAEA,IAAA,eAAe,EAAErB;AAFjB,IAHD;AAQA,CAjCD;;AAmCA,eAAeD,WAAf","sourcesContent":["import * as React from 'react';\r\nimport { StyleSheet, Text, View ,Image} from'react-native';\r\nimport * as ExpoTHREE from 'expo-three';\r\nimport * as THREE from 'three';\r\nimport {EpoWebGLRendering, GLView} from 'expo-gl'\r\n\r\nconst ScreenFinal = () => {\r\n  //  const { photo } = route.params;\r\n  async function _onContextCreate (gl) {\r\n        \r\n    const { drawingBufferWidth: width, drawingBufferHeight: height } = gl; // Définition des dimensions d'affichage\r\n    const sceneColor = 0x10505b; // Couleur de fond de la zone\r\n\r\n    // Création d'un \"Renderer\" WEBGL sans le DOM habituel avec THRE\r\n    let renderer = new ExpoTHREE.Renderer({ gl });\r\n    renderer.setSize(width, height);\r\n    renderer.setClearColor(sceneColor);\r\n\r\n    // Création de la caméra 3D avec positionnement dans l'espace\r\n    let camera = new THREE.PerspectiveCamera(80, width / height, 0.01, 1000);\r\n    camera.position.set(2, 5, 5);\r\n\r\n    // Création de la scène à afficher, et ajout d'une grille pour aider au positionnement\r\n    let scene = new THREE.Scene();\r\n    scene.add(new THREE.GridHelper(10, 15));\r\n\r\n    // Rendu de la scène \r\n    renderer.render(scene, camera);\r\n    gl.endFrameEXP();\r\n}\r\n\r\n return (\r\n \r\n //<Image source={{ uri: photo.uri }} style={{width:100+'%',height:100+'%'}}/>\r\n  <GLView\r\n  style={{ flex: 1 }}\r\n  onContextCreate={_onContextCreate}\r\n  />\r\n );\r\n}\r\n\r\nexport default ScreenFinal"]},"metadata":{},"sourceType":"module"}