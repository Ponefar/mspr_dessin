{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport { DefaultPropTypes, ARPropTypes } from \"./PropTypes\";\nimport BaseModelView from \"./BaseModelView\";\nimport RCTARModelView from \"./RCTARModelView\";\n\nvar ARModelView = function (_BaseModelView) {\n  _inherits(ARModelView, _BaseModelView);\n\n  var _super = _createSuper(ARModelView);\n\n  function ARModelView() {\n    var _this;\n\n    _classCallCheck(this, ARModelView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.rctView = null;\n\n    _this.setRef = function (view) {\n      _this.rctView = view;\n    };\n\n    return _this;\n  }\n\n  _createClass(ARModelView, [{\n    key: \"startAnimation\",\n    value: function startAnimation() {\n      NativeModules['3DARModelViewManager'].startAnimation(findNodeHandle(this.rctView));\n    }\n  }, {\n    key: \"stopAnimation\",\n    value: function stopAnimation() {\n      NativeModules['3DARModelViewManager'].stopAnimation(findNodeHandle(this.rctView));\n    }\n  }, {\n    key: \"setProgress\",\n    value: function setProgress(value) {\n      var progress = value >= 1.0 ? 0.999999 : value;\n      progress = progress < 0.0 ? 0.0 : progress;\n      NativeModules['3DARModelViewManager'].setProgress(findNodeHandle(this.rctView), progress);\n    }\n  }, {\n    key: \"restart\",\n    value: function restart() {\n      NativeModules['3DARModelViewManager'].restart(findNodeHandle(this.rctView));\n    }\n  }, {\n    key: \"getSnapshot\",\n    value: function getSnapshot(saveToLibrary) {\n      return NativeModules['3DARModelViewManager'].getSnapshot(findNodeHandle(this.rctView), saveToLibrary);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          modelSrc = _this$state.modelSrc,\n          textureSrc = _this$state.textureSrc;\n      var scale = this.props.scale || 1;\n      return modelSrc && textureSrc ? React.createElement(RCTARModelView, _extends({}, this.props, {\n        ref: this.setRef,\n        scale: scale,\n        modelSrc: modelSrc,\n        textureSrc: textureSrc,\n        autoPlayAnimations: this.props.autoPlay\n      })) : React.createElement(View, this.props);\n    }\n  }]);\n\n  return ARModelView;\n}(BaseModelView);\n\nARModelView.propTypes = _objectSpread(_objectSpread({}, DefaultPropTypes), ARPropTypes);\nexport default ARModelView;","map":{"version":3,"sources":["C:/wamp64/www/expo_copie/AwesomeProject/node_modules/react-native-3d-model-view/lib/ARModelView.js"],"names":["React","DefaultPropTypes","ARPropTypes","BaseModelView","RCTARModelView","ARModelView","rctView","setRef","view","NativeModules","startAnimation","findNodeHandle","stopAnimation","value","progress","setProgress","restart","saveToLibrary","getSnapshot","state","modelSrc","textureSrc","scale","props","autoPlay","propTypes"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAEA,SAASC,gBAAT,EAA2BC,WAA3B;AACA,OAAOC,aAAP;AACA,OAAOC,cAAP;;IAEMC,W;;;;;;;;;;;;;;;UAEJC,O,GAAU,I;;UAEVC,M,GAAS,UAAAC,IAAI,EAAI;AACf,YAAKF,OAAL,GAAeE,IAAf;AACD,K;;;;;;;WAED,0BAAkB;AAChBC,MAAAA,aAAa,CAAC,sBAAD,CAAb,CAAsCC,cAAtC,CAAqDC,cAAc,CAAC,KAAKL,OAAN,CAAnE;AACD;;;WAED,yBAAiB;AACfG,MAAAA,aAAa,CAAC,sBAAD,CAAb,CAAsCG,aAAtC,CAAoDD,cAAc,CAAC,KAAKL,OAAN,CAAlE;AACD;;;WAED,qBAAaO,KAAb,EAAoB;AAClB,UAAIC,QAAQ,GAAGD,KAAK,IAAI,GAAT,GAAe,QAAf,GAA0BA,KAAzC;AACAC,MAAAA,QAAQ,GAAGA,QAAQ,GAAG,GAAX,GAAiB,GAAjB,GAAuBA,QAAlC;AACAL,MAAAA,aAAa,CAAC,sBAAD,CAAb,CAAsCM,WAAtC,CAAkDJ,cAAc,CAAC,KAAKL,OAAN,CAAhE,EAAgFQ,QAAhF;AACD;;;WAED,mBAAW;AACTL,MAAAA,aAAa,CAAC,sBAAD,CAAb,CAAsCO,OAAtC,CAA8CL,cAAc,CAAC,KAAKL,OAAN,CAA5D;AACD;;;WAED,qBAAaW,aAAb,EAA4B;AAC1B,aAAOR,aAAa,CAAC,sBAAD,CAAb,CAAsCS,WAAtC,CAAkDP,cAAc,CAAC,KAAKL,OAAN,CAAhE,EAAgFW,aAAhF,CAAP;AACD;;;WAED,kBAAU;AACR,wBAA+B,KAAKE,KAApC;AAAA,UAAOC,QAAP,eAAOA,QAAP;AAAA,UAAiBC,UAAjB,eAAiBA,UAAjB;AACA,UAAMC,KAAK,GAAG,KAAKC,KAAL,CAAWD,KAAX,IAAoB,CAAlC;AACA,aAAOF,QAAQ,IAAIC,UAAZ,GACL,oBAAC,cAAD,eACI,KAAKE,KADT;AAEA,QAAA,GAAG,EAAE,KAAKhB,MAFV;AAGA,QAAA,KAAK,EAAEe,KAHP;AAIA,QAAA,QAAQ,EAAEF,QAJV;AAKA,QAAA,UAAU,EAAEC,UALZ;AAMA,QAAA,kBAAkB,EAAE,KAAKE,KAAL,CAAWC;AAN/B,SADK,GAQL,oBAAC,IAAD,EAAU,KAAKD,KAAf,CARF;AASD;;;;EA1CuBpB,a;;AA6C1BE,WAAW,CAACoB,SAAZ,mCACKxB,gBADL,GAEKC,WAFL;AAKA,eAAeG,WAAf","sourcesContent":["import React from 'react'\nimport { View, findNodeHandle, NativeModules } from 'react-native'\nimport { DefaultPropTypes, ARPropTypes } from './PropTypes'\nimport BaseModelView from './BaseModelView'\nimport RCTARModelView from './RCTARModelView'\n\nclass ARModelView extends BaseModelView {\n\n  rctView = null\n\n  setRef = view => {\n    this.rctView = view\n  }\n\n  startAnimation () {\n    NativeModules['3DARModelViewManager'].startAnimation(findNodeHandle(this.rctView))\n  }\n\n  stopAnimation () {\n    NativeModules['3DARModelViewManager'].stopAnimation(findNodeHandle(this.rctView))\n  }\n\n  setProgress (value) {\n    let progress = value >= 1.0 ? 0.999999 : value\n    progress = progress < 0.0 ? 0.0 : progress\n    NativeModules['3DARModelViewManager'].setProgress(findNodeHandle(this.rctView), progress)\n  }\n\n  restart () {\n    NativeModules['3DARModelViewManager'].restart(findNodeHandle(this.rctView))\n  }\n\n  getSnapshot (saveToLibrary) {\n    return NativeModules['3DARModelViewManager'].getSnapshot(findNodeHandle(this.rctView), saveToLibrary)\n  }\n\n  render () {\n    const {modelSrc, textureSrc} = this.state\n    const scale = this.props.scale || 1\n    return modelSrc && textureSrc\n    ? <RCTARModelView\n      {...this.props}\n      ref={this.setRef}\n      scale={scale}\n      modelSrc={modelSrc}\n      textureSrc={textureSrc}\n      autoPlayAnimations={this.props.autoPlay} />\n    : <View {...this.props} />\n  }\n}\n\nARModelView.propTypes = {\n  ...DefaultPropTypes,\n  ...ARPropTypes\n}\n\nexport default ARModelView\n"]},"metadata":{},"sourceType":"module"}