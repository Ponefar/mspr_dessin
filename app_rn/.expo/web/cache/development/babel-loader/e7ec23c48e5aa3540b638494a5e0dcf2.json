{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport PropTypes from 'prop-types';\nimport xmldom from 'xmldom';\nimport resolveAssetSource from 'react-native/Libraries/Image/resolveAssetSource';\nimport Svg, { Circle, Ellipse, G, LinearGradient, RadialGradient, Line, Path, Polygon, Polyline, Rect, Text, TSpan, Defs, Use, Stop } from 'react-native-svg';\nimport * as utils from \"./utils\";\nvar ACCEPTED_SVG_ELEMENTS = ['svg', 'g', 'circle', 'path', 'rect', 'defs', 'use', 'line', 'linearGradient', 'radialGradient', 'stop', 'ellipse', 'polygon', 'polyline', 'text', 'tspan'];\nvar SVG_ATTS = ['viewBox', 'width', 'height'];\nvar G_ATTS = ['id'];\nvar CIRCLE_ATTS = ['cx', 'cy', 'r'];\nvar PATH_ATTS = ['d'];\nvar RECT_ATTS = ['width', 'height', 'rx', 'ry'];\nvar LINE_ATTS = ['x1', 'y1', 'x2', 'y2'];\nvar LINEARG_ATTS = LINE_ATTS.concat(['id', 'gradientUnits']);\nvar RADIALG_ATTS = CIRCLE_ATTS.concat(['id', 'gradientUnits']);\nvar STOP_ATTS = ['offset', 'stopColor'];\nvar ELLIPSE_ATTS = ['cx', 'cy', 'rx', 'ry'];\nvar TEXT_ATTS = ['fontFamily', 'fontSize', 'fontWeight', 'textAnchor'];\nvar IMAGE_ATTS = ['width', 'height', 'preserveAspectRatio', 'href', 'clipPath'];\nvar POLYGON_ATTS = ['points'];\nvar POLYLINE_ATTS = ['points'];\nvar USE_ATTS = ['href'];\nvar COMMON_ATTS = ['id', 'fill', 'fillOpacity', 'stroke', 'strokeWidth', 'strokeOpacity', 'opacity', 'strokeLinecap', 'strokeLinejoin', 'strokeDasharray', 'strokeDashoffset', 'x', 'y', 'rotate', 'scale', 'origin', 'originX', 'originY', 'transform', 'clipPath'];\nvar ind = 0;\n\nfunction fixXlinkHref(node) {\n  if (node.attributes) {\n    var hrefAttr = Object.keys(node.attributes).find(function (a) {\n      return node.attributes[a].name === 'href';\n    });\n    var legacyHrefAttr = Object.keys(node.attributes).find(function (a) {\n      return node.attributes[a].name === 'xlink:href';\n    });\n    return node.attributes[hrefAttr || legacyHrefAttr].value;\n  }\n\n  return null;\n}\n\nfunction fixYPosition(y, node) {\n  if (node.attributes) {\n    var fontSizeAttr = Object.keys(node.attributes).find(function (a) {\n      return node.attributes[a].name === 'font-size';\n    });\n\n    if (fontSizeAttr) {\n      return '' + (parseFloat(y) - parseFloat(node.attributes[fontSizeAttr].value));\n    }\n  }\n\n  if (!node.parentNode) {\n    return y;\n  }\n\n  return fixYPosition(y, node.parentNode);\n}\n\nvar SvgUri = function (_Component) {\n  _inherits(SvgUri, _Component);\n\n  var _super = _createSuper(SvgUri);\n\n  function SvgUri(props) {\n    var _this;\n\n    _classCallCheck(this, SvgUri);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      fill: props.fill,\n      svgXmlData: props.svgXmlData,\n      stroke: props.stroke\n    };\n    _this.createSVGElement = _this.createSVGElement.bind(_assertThisInitialized(_this));\n    _this.obtainComponentAtts = _this.obtainComponentAtts.bind(_assertThisInitialized(_this));\n    _this.inspectNode = _this.inspectNode.bind(_assertThisInitialized(_this));\n    _this.fetchSVGData = _this.fetchSVGData.bind(_assertThisInitialized(_this));\n    _this.isComponentMounted = false;\n\n    if (props.source) {\n      var source = resolveAssetSource(props.source) || {};\n\n      _this.fetchSVGData(source.uri);\n    }\n\n    return _this;\n  }\n\n  _createClass(SvgUri, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.isComponentMounted = true;\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.source) {\n        var source = resolveAssetSource(nextProps.source) || {};\n        var oldSource = resolveAssetSource(this.props.source) || {};\n\n        if (source.uri !== oldSource.uri) {\n          this.fetchSVGData(source.uri);\n        }\n      }\n\n      if (nextProps.svgXmlData !== this.props.svgXmlData) {\n        this.setState({\n          svgXmlData: nextProps.svgXmlData\n        });\n      }\n\n      if (nextProps.fill !== this.props.fill) {\n        this.setState({\n          fill: nextProps.fill\n        });\n      }\n\n      if (nextProps.stroke !== this.props.stroke) {\n        this.setState({\n          stroke: nextProps.stroke\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isComponentMounted = false;\n    }\n  }, {\n    key: \"fetchSVGData\",\n    value: function fetchSVGData(uri) {\n      var _this2 = this;\n\n      var responseXML, error, response;\n      return _regeneratorRuntime.async(function fetchSVGData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              responseXML = null, error = null;\n              _context.prev = 1;\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(fetch(uri));\n\n            case 4:\n              response = _context.sent;\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(response.text());\n\n            case 7:\n              responseXML = _context.sent;\n              _context.next = 14;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](1);\n              error = _context.t0;\n              console.error('ERROR SVG', _context.t0);\n\n            case 14:\n              _context.prev = 14;\n\n              if (this.isComponentMounted) {\n                this.setState({\n                  svgXmlData: responseXML\n                }, function () {\n                  var onLoad = _this2.props.onLoad;\n\n                  if (onLoad && !error) {\n                    onLoad();\n                  }\n                });\n              }\n\n              return _context.finish(14);\n\n            case 17:\n              return _context.abrupt(\"return\", responseXML);\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[1, 10, 14, 17]], Promise);\n    }\n  }, {\n    key: \"trimElementChildren\",\n    value: function trimElementChildren(children) {\n      for (var _iterator = _createForOfIteratorHelperLoose(children), _step; !(_step = _iterator()).done;) {\n        var child = _step.value;\n\n        if (typeof child === 'string') {\n          if (child.trim().length === 0) {\n            children.splice(children.indexOf(child), 1);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"createSVGElement\",\n    value: function createSVGElement(node, childs) {\n      this.trimElementChildren(childs);\n      var componentAtts = {};\n      var i = ind++;\n\n      switch (node.nodeName) {\n        case 'svg':\n          componentAtts = this.obtainComponentAtts(node, SVG_ATTS);\n\n          if (this.props.width) {\n            componentAtts.width = this.props.width;\n          }\n\n          if (this.props.height) {\n            componentAtts.height = this.props.height;\n          }\n\n          return React.createElement(Svg, _extends({\n            key: i\n          }, componentAtts), childs);\n\n        case 'g':\n          componentAtts = this.obtainComponentAtts(node, G_ATTS);\n          return React.createElement(G, _extends({\n            key: i\n          }, componentAtts), childs);\n\n        case 'path':\n          componentAtts = this.obtainComponentAtts(node, PATH_ATTS);\n          return React.createElement(Path, _extends({\n            key: i\n          }, componentAtts), childs);\n\n        case 'circle':\n          componentAtts = this.obtainComponentAtts(node, CIRCLE_ATTS);\n          return React.createElement(Circle, _extends({\n            key: i\n          }, componentAtts), childs);\n\n        case 'rect':\n          componentAtts = this.obtainComponentAtts(node, RECT_ATTS);\n          return React.createElement(Rect, _extends({\n            key: i\n          }, componentAtts), childs);\n\n        case 'line':\n          componentAtts = this.obtainComponentAtts(node, LINE_ATTS);\n          return React.createElement(Line, _extends({\n            key: i\n          }, componentAtts), childs);\n\n        case 'defs':\n          return React.createElement(Defs, {\n            key: i\n          }, childs);\n\n        case 'use':\n          componentAtts = this.obtainComponentAtts(node, USE_ATTS);\n          componentAtts.href = fixXlinkHref(node);\n          return React.createElement(Use, _extends({\n            key: i\n          }, componentAtts));\n\n        case 'linearGradient':\n          componentAtts = this.obtainComponentAtts(node, LINEARG_ATTS);\n          return React.createElement(LinearGradient, _extends({\n            key: i\n          }, componentAtts), childs);\n\n        case 'radialGradient':\n          componentAtts = this.obtainComponentAtts(node, RADIALG_ATTS);\n          return React.createElement(RadialGradient, _extends({\n            key: i\n          }, componentAtts), childs);\n\n        case 'stop':\n          componentAtts = this.obtainComponentAtts(node, STOP_ATTS);\n          return React.createElement(Stop, _extends({\n            key: i\n          }, componentAtts), childs);\n\n        case 'ellipse':\n          componentAtts = this.obtainComponentAtts(node, ELLIPSE_ATTS);\n          return React.createElement(Ellipse, _extends({\n            key: i\n          }, componentAtts), childs);\n\n        case 'polygon':\n          componentAtts = this.obtainComponentAtts(node, POLYGON_ATTS);\n          return React.createElement(Polygon, _extends({\n            key: i\n          }, componentAtts), childs);\n\n        case 'polyline':\n          componentAtts = this.obtainComponentAtts(node, POLYLINE_ATTS);\n          return React.createElement(Polyline, _extends({\n            key: i\n          }, componentAtts), childs);\n\n        case 'text':\n          componentAtts = this.obtainComponentAtts(node, TEXT_ATTS);\n\n          if (componentAtts.y) {\n            componentAtts.y = fixYPosition(componentAtts.y, node);\n          }\n\n          return React.createElement(Text, _extends({\n            key: i\n          }, componentAtts), childs);\n\n        case 'tspan':\n          componentAtts = this.obtainComponentAtts(node, TEXT_ATTS);\n\n          if (componentAtts.y) {\n            componentAtts.y = fixYPosition(componentAtts.y, node);\n          }\n\n          return React.createElement(TSpan, _extends({\n            key: i\n          }, componentAtts), childs);\n\n        case 'image':\n          componentAtts = this.obtainComponentAtts(node, IMAGE_ATTS);\n\n          if (componentAtts.y) {\n            componentAtts.y = fixYPosition(componentAtts.y, node);\n          }\n\n          return React.createElement(Image, _extends({\n            key: i\n          }, componentAtts), childs);\n\n        default:\n          return null;\n      }\n    }\n  }, {\n    key: \"obtainComponentAtts\",\n    value: function obtainComponentAtts(_ref, enabledAttributes) {\n      var _this3 = this;\n\n      var attributes = _ref.attributes;\n      var styleAtts = {};\n\n      if (this.state.fill && this.props.fillAll) {\n        styleAtts.fill = this.state.fill;\n      }\n\n      Array.from(attributes).forEach(function (_ref2) {\n        var nodeName = _ref2.nodeName,\n            nodeValue = _ref2.nodeValue;\n\n        _extends(styleAtts, utils.transformStyle({\n          nodeName: nodeName,\n          nodeValue: nodeValue,\n          fillProp: _this3.state.fill,\n          strokeProp: _this3.state.stroke\n        }));\n      });\n      var componentAtts = Array.from(attributes).map(utils.camelCaseNodeName).map(utils.removePixelsFromNodeValue).filter(utils.getEnabledAttributes(enabledAttributes.concat(COMMON_ATTS))).reduce(function (acc, _ref3) {\n        var nodeName = _ref3.nodeName,\n            nodeValue = _ref3.nodeValue;\n        acc[nodeName] = _this3.state.fill && nodeName === 'fill' && nodeValue !== 'none' ? _this3.state.fill : _this3.state.stroke && nodeName === 'stroke' && nodeValue !== 'none' ? _this3.state.stroke : nodeValue;\n        return acc;\n      }, {});\n\n      _extends(componentAtts, styleAtts);\n\n      return componentAtts;\n    }\n  }, {\n    key: \"inspectNode\",\n    value: function inspectNode(node) {\n      if (!ACCEPTED_SVG_ELEMENTS.includes(node.nodeName)) {\n        return React.createElement(View, {\n          key: ind++\n        });\n      }\n\n      var arrayElements = [];\n\n      if (node.childNodes && node.childNodes.length > 0) {\n        for (var i = 0; i < node.childNodes.length; i++) {\n          var isTextValue = node.childNodes[i].nodeValue;\n\n          if (isTextValue) {\n            arrayElements.push(node.childNodes[i].nodeValue);\n          } else {\n            var nodo = this.inspectNode(node.childNodes[i]);\n\n            if (nodo != null) {\n              arrayElements.push(nodo);\n            }\n          }\n        }\n      }\n\n      return this.createSVGElement(node, arrayElements);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      try {\n        if (this.state.svgXmlData == null) {\n          return null;\n        }\n\n        var inputSVG = this.state.svgXmlData.substring(this.state.svgXmlData.indexOf('<svg '), this.state.svgXmlData.indexOf('</svg>') + 6).replace(/<!-(.*?)->/g, '');\n        var doc = new xmldom.DOMParser().parseFromString(inputSVG);\n        var rootSVG = this.inspectNode(doc.childNodes[0]);\n        return React.createElement(View, {\n          style: this.props.style\n        }, rootSVG);\n      } catch (e) {\n        console.error('ERROR SVG', e);\n        return null;\n      }\n    }\n  }]);\n\n  return SvgUri;\n}(Component);\n\nSvgUri.propTypes = {\n  style: PropTypes.object,\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  svgXmlData: PropTypes.string,\n  source: PropTypes.any,\n  strokeProp: PropTypes.any,\n  fill: PropTypes.string,\n  onLoad: PropTypes.func,\n  fillAll: PropTypes.bool\n};\nmodule.exports = SvgUri;","map":{"version":3,"sources":["C:/wamp64/www/expo_copie/AwesomeProject/node_modules/react-native-svg-uri-updated/index.js"],"names":["React","Component","PropTypes","xmldom","resolveAssetSource","Svg","Circle","Ellipse","G","LinearGradient","RadialGradient","Line","Path","Polygon","Polyline","Rect","Text","TSpan","Defs","Use","Stop","utils","ACCEPTED_SVG_ELEMENTS","SVG_ATTS","G_ATTS","CIRCLE_ATTS","PATH_ATTS","RECT_ATTS","LINE_ATTS","LINEARG_ATTS","concat","RADIALG_ATTS","STOP_ATTS","ELLIPSE_ATTS","TEXT_ATTS","IMAGE_ATTS","POLYGON_ATTS","POLYLINE_ATTS","USE_ATTS","COMMON_ATTS","ind","fixXlinkHref","node","attributes","hrefAttr","Object","keys","find","a","name","legacyHrefAttr","value","fixYPosition","y","fontSizeAttr","parseFloat","parentNode","SvgUri","props","state","fill","svgXmlData","stroke","createSVGElement","bind","obtainComponentAtts","inspectNode","fetchSVGData","isComponentMounted","source","uri","nextProps","oldSource","setState","responseXML","error","fetch","response","text","console","onLoad","children","child","trim","length","splice","indexOf","childs","trimElementChildren","componentAtts","i","nodeName","width","height","href","enabledAttributes","styleAtts","fillAll","Array","from","forEach","nodeValue","transformStyle","fillProp","strokeProp","map","camelCaseNodeName","removePixelsFromNodeValue","filter","getEnabledAttributes","reduce","acc","includes","arrayElements","childNodes","isTextValue","push","nodo","inputSVG","substring","replace","doc","DOMParser","parseFromString","rootSVG","style","e","propTypes","object","oneOfType","string","number","any","func","bool","module","exports"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { View } from 'react-native';\nimport PropTypes from 'prop-types';\nimport xmldom from 'xmldom';\nimport resolveAssetSource from 'react-native/Libraries/Image/resolveAssetSource';\n\nimport Svg, {\n  Circle,\n  Ellipse,\n  G,\n  LinearGradient,\n  RadialGradient,\n  Line,\n  Path,\n  Polygon,\n  Polyline,\n  Rect,\n  Text,\n  TSpan,\n  Defs,\n  Use,\n  Stop\n} from 'react-native-svg';\n\nimport * as utils from './utils';\n\nconst ACCEPTED_SVG_ELEMENTS = [\n  'svg',\n  'g',\n  'circle',\n  'path',\n  'rect',\n  'defs',\n  'use',\n  'line',\n  'linearGradient',\n  'radialGradient',\n  'stop',\n  'ellipse',\n  'polygon',\n  'polyline',\n  'text',\n  'tspan'\n];\n\n// Attributes from SVG elements that are mapped directly.\nconst SVG_ATTS = ['viewBox', 'width', 'height'];\nconst G_ATTS = ['id'];\n\nconst CIRCLE_ATTS = ['cx', 'cy', 'r'];\nconst PATH_ATTS = ['d'];\nconst RECT_ATTS = ['width', 'height', 'rx', 'ry'];\nconst LINE_ATTS = ['x1', 'y1', 'x2', 'y2'];\nconst LINEARG_ATTS = LINE_ATTS.concat(['id', 'gradientUnits']);\nconst RADIALG_ATTS = CIRCLE_ATTS.concat(['id', 'gradientUnits']);\nconst STOP_ATTS = ['offset', 'stopColor'];\nconst ELLIPSE_ATTS = ['cx', 'cy', 'rx', 'ry'];\n\nconst TEXT_ATTS = ['fontFamily', 'fontSize', 'fontWeight', 'textAnchor'];\n\nconst IMAGE_ATTS = ['width', 'height', 'preserveAspectRatio', 'href', 'clipPath'];\n\nconst POLYGON_ATTS = ['points'];\nconst POLYLINE_ATTS = ['points'];\n\nconst USE_ATTS = ['href'];\n\nconst COMMON_ATTS = [\n  'id',\n  'fill',\n  'fillOpacity',\n  'stroke',\n  'strokeWidth',\n  'strokeOpacity',\n  'opacity',\n  'strokeLinecap',\n  'strokeLinejoin',\n  'strokeDasharray',\n  'strokeDashoffset',\n  'x',\n  'y',\n  'rotate',\n  'scale',\n  'origin',\n  'originX',\n  'originY',\n  'transform',\n  'clipPath'\n];\n\nlet ind = 0;\n\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Element/use#Attributes\nfunction fixXlinkHref(node) {\n  if (node.attributes) {\n    const hrefAttr = Object.keys(node.attributes).find(a => node.attributes[a].name === 'href');\n    const legacyHrefAttr = Object.keys(node.attributes).find(a => node.attributes[a].name === 'xlink:href');\n\n    return node.attributes[hrefAttr || legacyHrefAttr].value;\n  }\n  return null;\n}\n\nfunction fixYPosition(y, node) {\n  if (node.attributes) {\n    const fontSizeAttr = Object.keys(node.attributes).find(a => node.attributes[a].name === 'font-size');\n    if (fontSizeAttr) {\n      return '' + (parseFloat(y) - parseFloat(node.attributes[fontSizeAttr].value));\n    }\n  }\n  if (!node.parentNode) {\n    return y;\n  }\n  return fixYPosition(y, node.parentNode);\n}\n\nclass SvgUri extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { fill: props.fill, svgXmlData: props.svgXmlData, stroke: props.stroke };\n    // this.state = { fill: props.fill, svgXmlData: props.svgXmlData };\n\n    this.createSVGElement = this.createSVGElement.bind(this);\n    this.obtainComponentAtts = this.obtainComponentAtts.bind(this);\n    this.inspectNode = this.inspectNode.bind(this);\n    this.fetchSVGData = this.fetchSVGData.bind(this);\n\n    this.isComponentMounted = false;\n\n    // Gets the image data from an URL or a static file\n    if (props.source) {\n      const source = resolveAssetSource(props.source) || {};\n      this.fetchSVGData(source.uri);\n    }\n  }\n\n  componentWillMount() {\n    this.isComponentMounted = true;\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.source) {\n      const source = resolveAssetSource(nextProps.source) || {};\n      const oldSource = resolveAssetSource(this.props.source) || {};\n      if (source.uri !== oldSource.uri) {\n        this.fetchSVGData(source.uri);\n      }\n    }\n\n    if (nextProps.svgXmlData !== this.props.svgXmlData) {\n      this.setState({ svgXmlData: nextProps.svgXmlData });\n    }\n\n    if (nextProps.fill !== this.props.fill) {\n      this.setState({ fill: nextProps.fill });\n    }\n\n    if (nextProps.stroke !== this.props.stroke) {\n      this.setState({ stroke: nextProps.stroke });\n    }\n  }\n\n  componentWillUnmount() {\n    this.isComponentMounted = false;\n  }\n\n  async fetchSVGData(uri) {\n    let responseXML = null,\n      error = null;\n    try {\n      const response = await fetch(uri);\n      responseXML = await response.text();\n    } catch (e) {\n      error = e;\n      console.error('ERROR SVG', e);\n    } finally {\n      if (this.isComponentMounted) {\n        this.setState({ svgXmlData: responseXML }, () => {\n          const { onLoad } = this.props;\n          if (onLoad && !error) {\n            onLoad();\n          }\n        });\n      }\n    }\n\n    return responseXML;\n  }\n\n  // Remove empty strings from children array\n  trimElementChildren(children) {\n    for (let child of children) {\n      if (typeof child === 'string') {\n        if (child.trim().length === 0) {\n          children.splice(children.indexOf(child), 1);\n        }\n      }\n    }\n  }\n\n  createSVGElement(node, childs) {\n    this.trimElementChildren(childs);\n    let componentAtts = {};\n    const i = ind++;\n    switch (node.nodeName) {\n      case 'svg':\n        componentAtts = this.obtainComponentAtts(node, SVG_ATTS);\n        if (this.props.width) {\n          componentAtts.width = this.props.width;\n        }\n        if (this.props.height) {\n          componentAtts.height = this.props.height;\n        }\n\n        return (\n          <Svg key={i} {...componentAtts}>\n            {childs}\n          </Svg>\n        );\n      case 'g':\n        componentAtts = this.obtainComponentAtts(node, G_ATTS);\n        return (\n          <G key={i} {...componentAtts}>\n            {childs}\n          </G>\n        );\n      case 'path':\n        componentAtts = this.obtainComponentAtts(node, PATH_ATTS);\n        return (\n          <Path key={i} {...componentAtts}>\n            {childs}\n          </Path>\n        );\n      case 'circle':\n        componentAtts = this.obtainComponentAtts(node, CIRCLE_ATTS);\n        return (\n          <Circle key={i} {...componentAtts}>\n            {childs}\n          </Circle>\n        );\n      case 'rect':\n        componentAtts = this.obtainComponentAtts(node, RECT_ATTS);\n        return (\n          <Rect key={i} {...componentAtts}>\n            {childs}\n          </Rect>\n        );\n      case 'line':\n        componentAtts = this.obtainComponentAtts(node, LINE_ATTS);\n        return (\n          <Line key={i} {...componentAtts}>\n            {childs}\n          </Line>\n        );\n      case 'defs':\n        return <Defs key={i}>{childs}</Defs>;\n      case 'use':\n        componentAtts = this.obtainComponentAtts(node, USE_ATTS);\n        componentAtts.href = fixXlinkHref(node);\n        return <Use key={i} {...componentAtts}/>;\n      case 'linearGradient':\n        componentAtts = this.obtainComponentAtts(node, LINEARG_ATTS);\n        return (\n          <LinearGradient key={i} {...componentAtts}>\n            {childs}\n          </LinearGradient>\n        );\n      case 'radialGradient':\n        componentAtts = this.obtainComponentAtts(node, RADIALG_ATTS);\n        return (\n          <RadialGradient key={i} {...componentAtts}>\n            {childs}\n          </RadialGradient>\n        );\n      case 'stop':\n        componentAtts = this.obtainComponentAtts(node, STOP_ATTS);\n        return (\n          <Stop key={i} {...componentAtts}>\n            {childs}\n          </Stop>\n        );\n      case 'ellipse':\n        componentAtts = this.obtainComponentAtts(node, ELLIPSE_ATTS);\n        return (\n          <Ellipse key={i} {...componentAtts}>\n            {childs}\n          </Ellipse>\n        );\n      case 'polygon':\n        componentAtts = this.obtainComponentAtts(node, POLYGON_ATTS);\n        return (\n          <Polygon key={i} {...componentAtts}>\n            {childs}\n          </Polygon>\n        );\n      case 'polyline':\n        componentAtts = this.obtainComponentAtts(node, POLYLINE_ATTS);\n        return (\n          <Polyline key={i} {...componentAtts}>\n            {childs}\n          </Polyline>\n        );\n      case 'text':\n        componentAtts = this.obtainComponentAtts(node, TEXT_ATTS);\n        if (componentAtts.y) {\n          componentAtts.y = fixYPosition(componentAtts.y, node);\n        }\n        return (\n          <Text key={i} {...componentAtts}>\n            {childs}\n          </Text>\n        );\n      case 'tspan':\n        componentAtts = this.obtainComponentAtts(node, TEXT_ATTS);\n        if (componentAtts.y) {\n          componentAtts.y = fixYPosition(componentAtts.y, node);\n        }\n        return (\n          <TSpan key={i} {...componentAtts}>\n            {childs}\n          </TSpan>\n        );\n      case 'image':\n        componentAtts = this.obtainComponentAtts(node, IMAGE_ATTS);\n        if (componentAtts.y) {\n          componentAtts.y = fixYPosition(componentAtts.y, node);\n        }\n        return (\n          <Image key={i} {...componentAtts}>\n            {childs}\n          </Image>\n        );\n      default:\n        return null;\n    }\n  }\n\n  obtainComponentAtts({ attributes }, enabledAttributes) {\n    const styleAtts = {};\n\n    if (this.state.fill && this.props.fillAll) {\n      styleAtts.fill = this.state.fill;\n    }\n\n    Array.from(attributes).forEach(({ nodeName, nodeValue }) => {\n      Object.assign(\n        styleAtts,\n        utils.transformStyle({\n          nodeName,\n          nodeValue,\n          fillProp: this.state.fill,\n          strokeProp: this.state.stroke\n        })\n      );\n    });\n\n    const componentAtts = Array.from(attributes)\n      .map(utils.camelCaseNodeName)\n      .map(utils.removePixelsFromNodeValue)\n      .filter(utils.getEnabledAttributes(enabledAttributes.concat(COMMON_ATTS)))\n      .reduce((acc, { nodeName, nodeValue }) => {\n        acc[nodeName] =\n          this.state.fill && nodeName === 'fill' && nodeValue !== 'none'\n            ? this.state.fill\n            : this.state.stroke && nodeName === 'stroke' && nodeValue !== 'none'\n            ? this.state.stroke\n            : nodeValue;\n        // acc[nodeName] =\n        // this.state.fill && nodeName === 'fill' && nodeValue !== 'none' ? this.state.fill : nodeValue;\n        return acc;\n      }, {});\n    Object.assign(componentAtts, styleAtts);\n\n    return componentAtts;\n  }\n\n  inspectNode(node) {\n    // Only process accepted elements\n    if (!ACCEPTED_SVG_ELEMENTS.includes(node.nodeName)) {\n      return <View key={ind++} />;\n    }\n\n    // Process the xml node\n    const arrayElements = [];\n\n    // if have children process them.\n    // Recursive function.\n    if (node.childNodes && node.childNodes.length > 0) {\n      for (let i = 0; i < node.childNodes.length; i++) {\n        const isTextValue = node.childNodes[i].nodeValue;\n        if (isTextValue) {\n          arrayElements.push(node.childNodes[i].nodeValue);\n        } else {\n          const nodo = this.inspectNode(node.childNodes[i]);\n          if (nodo != null) {\n            arrayElements.push(nodo);\n          }\n        }\n      }\n    }\n\n    return this.createSVGElement(node, arrayElements);\n  }\n\n  render() {\n    try {\n      if (this.state.svgXmlData == null) {\n        return null;\n      }\n\n      const inputSVG = this.state.svgXmlData\n        .substring(this.state.svgXmlData.indexOf('<svg '), this.state.svgXmlData.indexOf('</svg>') + 6)\n        .replace(/<!-(.*?)->/g, '');\n\n      const doc = new xmldom.DOMParser().parseFromString(inputSVG);\n\n      const rootSVG = this.inspectNode(doc.childNodes[0]);\n\n      return <View style={this.props.style}>{rootSVG}</View>;\n    } catch (e) {\n      console.error('ERROR SVG', e);\n      return null;\n    }\n  }\n}\n\nSvgUri.propTypes = {\n  style: PropTypes.object,\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  svgXmlData: PropTypes.string,\n  source: PropTypes.any,\n  strokeProp: PropTypes.any,\n  fill: PropTypes.string,\n  onLoad: PropTypes.func,\n  fillAll: PropTypes.bool\n}\n\nmodule.exports = SvgUri;\n"]},"metadata":{},"sourceType":"module"}