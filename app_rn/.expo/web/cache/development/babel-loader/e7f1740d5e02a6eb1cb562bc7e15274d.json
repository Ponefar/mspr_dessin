{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useRef } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Share from \"react-native-web/dist/exports/Share\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport axios from 'axios';\nimport ViewShot from 'react-native-view-shot';\nimport Toast from 'react-native-toast-message';\n\nvar ScreenFinal = function ScreenFinal(_ref) {\n  var route = _ref.route;\n\n  var GenererChaineAleatoire = function GenererChaineAleatoire(longueur) {\n    var listeCar = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    var chaine = '';\n    var max = listeCar.length - 1;\n\n    for (var i = 0; i < longueur; i++) {\n      chaine = chaine + listeCar[Math.floor(Math.random() * (max + 1))];\n    }\n\n    return chaine;\n  };\n\n  var viewShotRef = useRef();\n\n  function captureAndShareScreenshot() {\n    var imageUri, token_url;\n    return _regeneratorRuntime.async(function captureAndShareScreenshot$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(viewShotRef.current.capture());\n\n          case 2:\n            imageUri = _context.sent;\n\n            if (!(Platform.OS === 'ios')) {\n              _context.next = 7;\n              break;\n            }\n\n            Share.share({\n              url: imageUri\n            });\n            _context.next = 10;\n            break;\n\n          case 7:\n            token_url = GenererChaineAleatoire(20);\n            _context.next = 10;\n            return _regeneratorRuntime.awrap(axios({\n              method: 'POST',\n              data: 'img=' + imageUri + '&token_url=' + token_url,\n              url: 'https://www.adrien-meynard.fr/dessin/post_api/'\n            }).then(function (response) {\n              if (response.data === 1) {\n                Toast.show({\n                  type: 'success',\n                  text1: 'Lien de l\\'image copié dans le presse papier'\n                });\n              } else {\n                Toast.show({\n                  type: 'error',\n                  text1: 'Erreur : merci de rééssayez plus tard'\n                });\n              }\n            }).catch(function (err) {\n              Toast.show({\n                type: 'error',\n                text1: err + ' :  merci de rééssayez plus tard'\n              });\n            }));\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  ;\n  return React.createElement(ViewShot, {\n    ref: viewShotRef,\n    options: {\n      quality: 1,\n      result: 'base64'\n    }\n  }, React.createElement(TouchableOpacity, {\n    style: styles.btn,\n    onPress: captureAndShareScreenshot\n  }, React.createElement(Text, {\n    style: styles.textBtn\n  }, \"SHARE\")), React.createElement(Toast, null));\n};\n\nvar styles = StyleSheet.create({\n  btn: {\n    zIndex: 9,\n    padding: 10,\n    width: 100 + '%',\n    marginBottom: 5,\n    backgroundColor: 'green',\n    position: 'absolute',\n    top: Dimensions.get('window').height - 175\n  },\n  textBtn: {\n    color: 'white',\n    fontSize: 20,\n    textAlign: 'center'\n  }\n});\nexport default ScreenFinal;","map":{"version":3,"sources":["C:/wamp64/www/expo_copie/AwesomeProject/components/ScreenFinal/index.js"],"names":["React","useRef","axios","ViewShot","Toast","ScreenFinal","route","GenererChaineAleatoire","longueur","listeCar","chaine","max","length","i","Math","floor","random","viewShotRef","captureAndShareScreenshot","current","capture","imageUri","Platform","OS","Share","share","url","token_url","method","data","then","response","show","type","text1","catch","err","quality","result","styles","btn","textBtn","StyleSheet","create","zIndex","padding","width","marginBottom","backgroundColor","position","top","Dimensions","get","height","color","fontSize","textAlign"],"mappings":"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","sourcesContent":["import React, { useRef } from 'react';\r\nimport { StyleSheet, Text, View, Image, TouchableOpacity, Button, Platform, Share, Dimensions  } from 'react-native';\r\nimport axios from 'axios';\r\nimport ViewShot from 'react-native-view-shot';\r\nimport Toast from 'react-native-toast-message';\r\n\r\nconst ScreenFinal = ({route}) => {\r\n  const GenererChaineAleatoire = longueur => {\r\n    let listeCar = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n    let chaine = '';\r\n    let max = listeCar.length - 1;\r\n    for (let i = 0; i < longueur; i++) {\r\n    chaine = chaine + listeCar[Math.floor(Math.random() * (max + 1) )];\r\n    }\r\n    return chaine;\r\n  }\r\n\r\n    // const { photo } = route.params;\r\n\r\n    let viewShotRef = useRef()\r\n    async function captureAndShareScreenshot() {\r\n      const imageUri = await viewShotRef.current.capture()\r\n      if(Platform.OS === 'ios') {\r\n        Share.share({url: imageUri})  \r\n      } else {\r\n        let token_url = GenererChaineAleatoire(20)\r\n        await axios({\r\n          method: 'POST',\r\n          data: 'img='+imageUri+'&token_url='+token_url,\r\n          url:'https://www.adrien-meynard.fr/dessin/post_api/'\r\n        })\r\n        .then((response) => {\r\n          if(response.data === 1) {\r\n            Toast.show({\r\n              type: 'success',\r\n              text1: 'Lien de l\\'image copié dans le presse papier',\r\n            });\r\n            // adrien-meynard.fr/dessin/?token_img=+chaine\r\n          }else {\r\n            Toast.show({\r\n              type: 'error',\r\n              text1: 'Erreur : merci de rééssayez plus tard',\r\n            });          \r\n          }\r\n        })\r\n        .catch((err) => {\r\n          Toast.show({\r\n            type: 'error',\r\n            text1: err + ' :  merci de rééssayez plus tard',\r\n          });          })\r\n      }\r\n    };\r\n\r\n  return (\r\n          // <Image source={{ uri: photo.uri }} style={{width:100+'%',height:100+'%'}}/> \r\n// peut etre a changer en fonction de la plateforme : si ios ou android ---- ios = \"\" \r\n    <ViewShot\r\n      ref={viewShotRef}\r\n      options={{quality: 1, result:'base64'}}> \r\n\r\n      <TouchableOpacity\r\n        style={styles.btn}\r\n        onPress={captureAndShareScreenshot}\r\n      >\r\n        <Text style={styles.textBtn}>SHARE</Text>\r\n      </TouchableOpacity>\r\n      <Toast />\r\n    </ViewShot>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  btn: {\r\n    zIndex:9,\r\n    padding: 10,\r\n    width: 100 + '%',\r\n    marginBottom: 5,\r\n    backgroundColor:'green',\r\n    position:'absolute',\r\n    top:Dimensions.get('window').height - 175, \r\n  },\r\n\r\n  textBtn: {\r\n    color: 'white',\r\n    fontSize: 20,\r\n    textAlign: 'center',\r\n  },\r\n})\r\nexport default ScreenFinal"]},"metadata":{},"sourceType":"module"}